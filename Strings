## Links
https://medium.com/analytics-vidhya/string-reference-cheat-sheet-for-python-ce4958235ad5
https://github.com/dennyzhang/cheatsheet-python-A4
https://www.techbeamers.com/python-strings-functions-and-examples/#string-formatting-operators-in-python
https://realpython.com/python-strings/#interpolating-variables-into-a-string

## Create strings in Python

# all of the following are equivalent
my_string = 'Hello'
print(my_string)

my_string = "Hello"
print(my_string)

my_string = '''Hello'''
print(my_string)

# triple quotes string can extend multiple lines
my_string = """Hello, welcome to
           the world of Python"""
print(my_string)


## Indexing
## If we try to access an index " out of the range or use numbers other than an integer ", we will get errors.
str = 'programiz'
print('str = ', str)

#first character
print('str[0] = ', str[0])

#last character
print('str[-1] = ', str[-1])

#slicing 2nd to 5th character
print('str[1:5] = ', str[1:5])

#slicing 6th to 2nd last character
print('str[5:-2] = ', str[5:-2])

## Change or delete String ( Strings are immutable. This means that elements of a string cannot be changed once they have been assigned. 
   We can simply reassign different strings to the same name. ) 
# Reassigning the String
my_string = 'programiz'
my_string = 'python'
print(my_string)

## Delete the String ( We cannot delete or remove characters from a string. But deleting the string entirely is possible.)
my_string = 'python'
del my_string

### String Operations ###

## Concatenation

var1 = 'Python'
var2 = 'String'
print (var1+var2)

## Repetation
var1 = 'Python'
print (var1 * 3)

## Membership Testing ( in && not in )

# example (in)
var1 = 'Python'
print ('n' in var1) # True

# example (not in)
var1 = 'Python'
print ('N' not in var1) # True

## Iterating

# example
for var in var1: 
    print (var, end ="") # Python
    
# example
count = 0
for letter in 'Hello World':
    if(letter == 'l'):
        count += 1
print(count,'letters found')
    
## Raw String ( We can use it to ignore the actual meaning of Escape characters inside a string.)
print (r'\n')  # \n
print (R'\n')  # \n

## Built-in functions to Work with Python (Enumerate && length)
str = 'cold'

# enumerate()
list_enumerate = list(enumerate(str))
print('list(enumerate(str) = ', list_enumerate)

#character count
print('len(str) = ', len(str))


### String Formating operators in python ###

## Escape Sequence

# using triple quotes
print('''He said, "What's there?"''')

# escaping single quotes
print('He said, "What\'s there?"')

# escaping double quotes
print("He said, \"What's there?\"")

## Format Method for String ( Format strings contain curly braces {} as placeholders or replacement fields which get replaced. )
# default(implicit) order
default_order = "{}, {} and {}".format('John','Bill','Sean')
print(default_order)

# order using positional argument
positional_order = "{1}, {0} and {2}".format('John','Bill','Sean')
print(positional_order)

# order using keyword argument
keyword_order = "{s}, {b} and {j}".format(j='John',b='Bill',s='Sean')
print(keyword_order)

# mixed arguments
print("Hello {0}, your balance is {blc}.".format("Adam", blc=230.2346))

## Simple number formatting

# integer arguments
print("The number is:{:d}".format(123))

# float arguments
print("The float number is:{:f}".format(123.4567898))

# octal, binary and hexadecimal format
print("bin: {0:b}, oct: {0:o}, hex: {0:x}".format(12))

## Number formatting with padding for int and floats

# integer numbers with minimum width
print("{:5d}".format(12))

# width doesn't work for numbers longer than padding
print("{:2d}".format(1234))

# padding for float numbers
print("{:8.3f}".format(12.2346))

# integer numbers with minimum width filled with zeros
print("{:05d}".format(12))

# padding for float numbers filled with zeros
print("{:08.3f}".format(12.2346))

## Number formatting for signed numbers
# show the + sign
print("{:+f} {:+f}".format(12.23, -12.23))

# show the - sign only
print("{:-f} {:-f}".format(12.23, -12.23))

# show space for + sign
print("{: f} {: f}".format(12.23, -12.23))

## Number formatting with left, right and center alignment
# integer numbers with right alignment
print("{:5d}".format(12))

# float numbers with center alignment
print("{:^10.3f}".format(12.2346))

# integer left alignment filled with zeros
print("{:<05d}".format(12))

# float numbers with center alignment
print("{:=8.3f}".format(-12.2346))

##  String formatting with padding and alignment

# string padding with left alignment
print("{:5}".format("cat"))

# string padding with right alignment
print("{:>5}".format("cat"))

# string padding with center alignment
print("{:^5}".format("cat"))

# string padding with center alignment
# and '*' padding character
print("{:*^5}".format("cat"))

## Truncating strings with format()
# truncating strings to 3 letters
print("{:.3}".format("caterpillar"))

# truncating strings to 3 letters
# and padding
print("{:5.3}".format("caterpillar"))

# truncating strings to 3 letters,
# padding and center alignment
print("{:^5.3}".format("caterpillar"))

## Formatting class members using format()

# define Person class
class Person:
    age = 23
    name = "Adam"
print("{p.name}'s age is: {p.age}".format(p=Person()))

## Formatting dictionary members using format()
# define Person dictionary
person = {'age': 23, 'name': 'Adam'}

# format age
print("{p[name]}'s age is: {p[age]}".format(p=person))

## Note: There's an easier way to format dictionaries in Python using str.format(**mapping)

# define Person dictionary
person = {'age': 23, 'name': 'Adam'}

# format age
print("{name}'s age is: {age}".format(**person))

## Dynamic formatting using format()

# dynamic string format template
string = "{:{fill}{align}{width}}"

print(string.format('cat', fill='*', align='^', width=5)) # passing format codes as arguments

# dynamic float format template
num = "{:{align}{width}.{precision}f}"
print(num.format(123.236, align='<', width=8, precision=2)) # passing format codes as arguments

## Type-specific formatting with format() and overriding __format__() method
''' format() internally calls __format__() for datetime, while format() accesses the attributes of the complex number.
    You can easily override the __format__() method of any object for custom formatting. '''
# datetime formatting   
import datetime
date = datetime.datetime.now()
print("It's now: {:%Y/%m/%d %H:%M:%S}".format(date))

# complex number formatting
complexNumber = 1+2j
print("Real part: {0.real} and Imaginary part: {0.imag}".format(complexNumber))

# custom __format__() method
class Person:
    def __format__(self, format):
        if(format == 'age'):
            return '23'
        return 'None'

print("Adam's age is: {:age}".format(Person()))

## String capitalize
string = "python is AWesome."
capitalized_string = string.capitalize()
print('Old String: ', string)
print('Capitalized String:', capitalized_string)

## String Center
# center() Method With Default fillchar
string = "Python is awesome"
new_string = string.center(24)
print("Centered String: ", new_string)

# center() Method With * fillchar
string = "Python is awesome"
new_string = string.center(24, '*')
print("Centered String: ", new_string)

## Lower case using casefold
string = "PYTHON IS AWESOME"
print("Lowercase string:", string.casefold()) # print lowercase string

# Comparison using casefold
firstString = "der Fluß"
secondString = "der Fluss"

# ß is equivalent to ss
if firstString.casefold() == secondString.casefold():
    print('The strings are equal.')
else:
    print('The strings are not equal.')

## String Count

# Count number of occurrences of a given substring
string = "Python is awesome, isn't it?"
substring = "is"
count = string.count(substring)
print("The count is:", count)

# Count number of occurrences of a given substring using start and end
string = "Python is awesome, isn't it?"
substring = "i"
count = string.count(substring, 8, 25)  # count after first 'i' and before the last 'i'
print("The count is:", count)

## String endswith

#  endswith() Without start and end Parameters
text = "Python is easy to learn."
result = text.endswith('to learn')
print(result) # returns False

result = text.endswith('to learn.')
print(result) # returns True

result = text.endswith('Python is easy to learn.')
print(result) # returns True

#  endswith() With start and end Parameters
text = "Python programming is easy to learn."

result = text.endswith('learn.', 7) # start parameter: 7 # "programming is easy to learn." string is searched
print(result)

# Both start and end is provided # start: 7, end: 26 # "programming is easy" string is searched
result = text.endswith('is', 7, 26)
print(result) # Returns False
result = text.endswith('easy', 7, 26)
print(result) # returns True

## String expandtabs
# expandtabs() With Different Argument
str = "xyz\t12345\tabc"
print('Original String:', str)
print('Tabsize 2:', str.expandtabs(2)) # tabsize is set to 2
print('Tabsize 3:', str.expandtabs(3)) # tabsize is set to 3
print('Tabsize 4:', str.expandtabs(4)) # tabsize is set to 4
print('Tabsize 5:', str.expandtabs(5)) # tabsize is set to 5
print('Tabsize 6:', str.expandtabs(6)) # tabsize is set to 6

## String encode
Note: Since Python 3.0, strings are stored as Unicode,
i.e. each character in the string is represented by a code point. So, each string is just a sequence of Unicode code points.
For efficient storage of these strings, the sequence of code points are converted into set of bytes. The process is known as encoding.
## The popular encodings being utf-8, ascii, etc.

# Encoding with error parameter
string = 'pythön!'
print('The encoded version (with ignore) is:', string.encode("ascii", "ignore"))    # ignore error
print('The encoded version (with replace) is:', string.encode("ascii", "replace"))  # replace error

## String find

# find() With No start and end Argument

quote = 'Let it be, let it be, let it be'
result = quote.find('let it')
print("Substring 'let it':", result) # first occurance of 'let it'(case sensitive)

result = quote.find('small')
print("Substring 'small ':", result)  # find returns -1 if substring not found

if (quote.find('be,') != -1):  # How to use find()
    print("Contains substring 'be,'")
else:
    print("Doesn't contain substring")
    
# find() With start and end Arguments

quote = 'Do small things with great love'
print(quote.find('small things', 10)) # Substring is searched in 'hings with great love'
print(quote.find('o small ', 10, -1)) # Substring is searched in 'hings with great lov'
print(quote.find('things ', 6, 20)) # Substring is searched in 'll things with'

## String Index 

# index() With start and end Arguments
sentence = 'Python programming is fun.'
print(sentence.index('ing', 10))  # Substring is searched in 'gramming is fun.'
print(sentence.index('g is', 10, -4)) # Substring is searched in 'gramming is '
print(sentence.index('fun', 7, 18)) # Substring is searched in 'programming'




















